给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

解答：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target);
};
vector<int> Solution::twoSum(vector<int>& nums, int target) {
    int n = nums.size();
    vector<int> result;
    int i=0,j;
    while(i<n-1)
    {
            j=i+1;
         while(j<n)
                if(nums[i] + nums[j] == target){
                result.push_back(i);
                result.push_back(j);
                break;  
               
             }
             j++;
         }
       i++;
       
    }
        return result;
}

思路：
  让每个元素都互相的相加一次判断是不是target，如果是退出并返回位置，不是的话继续访问。
  本来打算大于target的元素跳过访问，但是忘记了，元素有可能是负数，所以存在target小于两个相加元素的其中一个。
